{"version":3,"sources":["components/description.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Desc","match","ActualMovie","name","desc","vurl","find","x","params","id","width","height","src","frameborder","allow","allowfullscreen","to","Button","variant","color","Home","className","url","map","el","Card","style","Img","Body","Title","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAkBeA,MAff,YAA0B,IAAVC,EAAS,EAATA,MAENC,EADU,CAAC,CAACC,KAAK,iBAAiBC,KAAK,4XAA0WC,KAAK,sDAAuD,CAACF,KAAK,QAAQC,KAAK,4NAAoMC,KAAK,sDAAsD,CAACF,KAAK,YAAYC,KAAK,sQAA0PC,KAAK,sDAAuD,CAACF,KAAK,aAAaC,KAAK,sIAA6HC,KAAK,uDAC9qCC,MAAK,SAAAC,GAAC,OAAEA,EAAEJ,OAAOF,EAAMO,OAAOC,MAC5D,OACA,oCACA,kBAAC,IAAD,KACA,4BAAKR,EAAMO,OAAOC,IAClB,2BAAIP,EAAYE,MAChB,wCACA,4BAAQM,MAAM,MAAMC,OAAO,MAAMC,IAAKV,EAAYG,KAAMQ,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,IACxL,kBAAC,IAAD,CAAMC,GAAG,KAAI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,WAAjC,6B,QCaEC,MArBnB,WAEI,OACA,yBAAKC,UAAU,OAFG,CAAC,CAAClB,KAAK,iBAAiBmB,IAAI,qEAAqE,CAACnB,KAAK,QAAQmB,IAAI,qEAAqE,CAACnB,KAAK,YAAYmB,IAAI,qEAAqE,CAACnB,KAAK,aAAamB,IAAI,kFAGpTC,KAAI,SAAAC,GAAE,OAClB,yBAAKH,UAAU,UACf,kBAAC,IAAD,KACA,kBAACI,EAAA,EAAD,CAAMC,MAAO,CAAEhB,MAAO,UACtB,kBAACe,EAAA,EAAKE,IAAN,CAAUT,QAAQ,MAAMN,IAAKY,EAAGF,MAChC,kBAACG,EAAA,EAAKG,KAAN,KACA,kBAACH,EAAA,EAAKI,MAAN,KAAaL,EAAGrB,OAEhB,kBAACsB,EAAA,EAAKG,KAAN,KACA,kBAAC,IAAD,CAAMZ,GAAE,WAAMQ,EAAGrB,OAAjB,IAA2B,kBAACc,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,WAAjC,qBAA3B,cCIeW,MAhBf,WAEE,OAEI,kBAAC,IAAD,KACF,6BAEE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWb,IACjC,kBAAC,IAAD,CAAOW,KAAK,OAAOE,UAAWjC,OCFhBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpC,MACvB,2DCZNqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7d09403e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link , BrowserRouter as Router} from 'react-router-dom';\r\nfunction Desc({ match }) {\r\n    const MovieDesc=[{name:\"Murder Mystery\",desc:\"Un policier new-yorkais honore une ancienne promesse et emmène sa femme en voyage en Europe. Au hasard d'une rencontre pendant le vol, le couple se fait convier à une réunion de famille privée sur le yacht luxueux d'un vieux milliardaire du nom de Malcolm Quince. Cependant, lorsque celui-ci est assassiné, les deux invités deviennent les principaux suspects.\",vurl:\"https://www.youtube-nocookie.com/embed/yIVd0dqjTSE\" },{name:\"Shaft\",desc:\"Le légendaire détective privé, John Shaft, fait équipe avec son fils, l'expert en cybersécurité JJ Shaft Jr., pour tenter d'en savoir plus sur un décès suspect en parcourant les rues de Harlem.\",vurl:\"https://www.youtube-nocookie.com/embed/lD41XdWcmbY\"},{name:\"El Camino\",desc:\"À la suite de sa tragique évasion, Jesse doit accepter son passé s'il veut se construire un avenir... ou quelque chose qui y ressemble plus ou moins. Un film qui fait suite au final de la série Breaking Bad, suivant les aventures de Jesse Pinkman.\",vurl:\"https://www.youtube-nocookie.com/embed/pbhCzMrc_8k\" },{name:\"Last Vegas\",desc:\"Un groupe de quatre vieux amis, Billy, Paddy, Archie et Sam décident de faire un enterrement de vie de garçon à Las Vegas.\",vurl:\"https://www.youtube-nocookie.com/embed/TvK3m0wJutI\" }];\r\n    const ActualMovie = MovieDesc.find(x=>x.name===match.params.id);\r\n    return(\r\n    <>\r\n    <Router>\r\n    <h1>{match.params.id}</h1>\r\n    <p>{ActualMovie.desc}</p>\r\n    <h2>Trailer:</h2>\r\n    <iframe width=\"560\" height=\"315\" src={ActualMovie.vurl} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n    <Link to=\"/\"><Button variant=\"outlined\" color=\"primary\"> Return to Home Page </Button></Link>\r\n    </Router>\r\n    </>\r\n)\r\n}\r\nexport default Desc;","import React  from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link , BrowserRouter as Router} from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nfunction Home() {\r\n    const MovieList = [{name:\"Murder Mystery\",url:\"https://fr.web.img6.acsta.net/pictures/19/06/13/09/35/4216544.jpg\"},{name:\"Shaft\",url:\"https://fr.web.img6.acsta.net/pictures/19/02/06/08/15/4431903.jpg\"},{name:\"El Camino\",url:\"https://fr.web.img5.acsta.net/pictures/19/09/24/17/24/4667551.jpg\"},{name:\"Last Vegas\",url:\"https://fr.web.img3.acsta.net/pictures/210/395/21039597_20130913113752098.jpg\"}]\r\n    return (\r\n    <div className=\"App\">\r\n{ MovieList.map(el=>\r\n<div className=\"Movies\">\r\n<Router>\r\n<Card style={{ width: '18rem' }}>\r\n<Card.Img variant=\"top\" src={el.url} />\r\n<Card.Body>\r\n<Card.Title>{el.name}</Card.Title>\r\n</Card.Body>\r\n<Card.Body>\r\n<Link to={`/${el.name}`} > <Button variant=\"outlined\" color=\"primary\"> See Description </Button> </Link>\r\n</Card.Body>\r\n</Card>\r\n</Router>\r\n</div>\r\n)}\r\n    </div>\r\n    );}\r\n    export default Home;","import React  from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Route, BrowserRouter as Router,Switch} from 'react-router-dom';\nimport Desc from './components/description';\nimport Home from './components/home';\nfunction App() {\n\n  return (\n    \n      <Router>\n    <div >\n      \n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/:id\" component={Desc} />  \n      \n    </div>    \n      </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}